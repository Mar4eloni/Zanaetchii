// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zanaetcii.Entities.Context;

namespace Zanaetcii.Entities.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Zanaetcii.Entities.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("WorkGiverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WorkId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("WorkGiverId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RatingId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("RatingAmmount")
                        .HasColumnType("float");

                    b.Property<int?>("WorkGiverId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("WorkGiverId");

                    b.HasIndex("WorkId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BankAcc")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("WorkFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkGiverId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("WorkId");

                    b.HasIndex("WorkFieldId");

                    b.HasIndex("WorkGiverId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.WorkField", b =>
                {
                    b.Property<int>("WorkFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkFieldId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkFieldId");

                    b.ToTable("WorkeFields");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.WorkGiver", b =>
                {
                    b.Property<int>("WorkGiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkGiverId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkGiverId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkGivers");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkfieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkfieldId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Application", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId");

                    b.HasOne("Zanaetcii.Entities.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Comment", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.Work", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zanaetcii.Entities.Models.WorkGiver", "WorkGiver")
                        .WithMany()
                        .HasForeignKey("WorkGiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zanaetcii.Entities.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zanaetcii.Entities.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Rating", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.WorkGiver", "WorkGiver")
                        .WithMany()
                        .HasForeignKey("WorkGiverId");

                    b.HasOne("Zanaetcii.Entities.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId");

                    b.HasOne("Zanaetcii.Entities.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Work", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.WorkField", "WorkField")
                        .WithMany()
                        .HasForeignKey("WorkFieldId");

                    b.HasOne("Zanaetcii.Entities.Models.WorkGiver", "WorkGiver")
                        .WithMany()
                        .HasForeignKey("WorkGiverId");

                    b.HasOne("Zanaetcii.Entities.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.WorkGiver", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Zanaetcii.Entities.Models.Worker", b =>
                {
                    b.HasOne("Zanaetcii.Entities.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Zanaetcii.Entities.Models.WorkField", "Workfield")
                        .WithMany()
                        .HasForeignKey("WorkfieldId");
                });
#pragma warning restore 612, 618
        }
    }
}
